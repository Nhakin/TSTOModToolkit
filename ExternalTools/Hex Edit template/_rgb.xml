<?xml version="1.0"?>
<!DOCTYPE binary_file_format SYSTEM "BinaryFileFormat.dtd">
<binary_file_format name="RGBFile" type_name="" comment="" expr="">
	<define_struct type_name="PixelWord" comment="" expr="- Color : 0x{this.Color;%04X}, RGBA : 0x{Red;%02X}{Green;%02X}{Blue;%02X}{Alpha;%02X}"><data type="int" name="Color" format="unsigned" len="2" display=""/><eval expr="Alpha = (Color &amp; 0x000F) * 0x11" display_error="false" display_result="false" comment=""/><if test="Alpha != 0" comment=""><eval expr="RgbMult = 255.0 / Alpha" display_error="false" display_result="false" comment=""/><else/><eval expr="RgbMult = 0" display_error="false" display_result="false" comment=""/></if><eval expr="Red = Int(((Color &amp; 0xF000) &gt;&gt; 0xC) * 0x11 * RgbMult)" display_error="false" display_result="false" comment=""/><eval expr="Green = Int(((Color &amp; 0x0F00) &gt;&gt; 0x8) * 0x11 * RgbMult)" display_error="false" display_result="false" comment=""/><eval expr="Blue = Int(((Color &amp; 0x00F0) &gt;&gt; 0x4) * 0x11 * RgbMult)" display_error="false" display_result="false" comment=""/><eval expr="{&quot;Red : 0x&quot;;%s}{Red;%02X}" display_error="false" display_result="true" comment=""/><eval expr="{&quot;Green : 0x&quot;;%s}{Green;%02X}" display_error="false" display_result="true" comment=""/><eval expr="{&quot;Blue : 0x&quot;;%s}{Blue;%02X}" display_error="false" display_result="true" comment=""/><eval expr="{&quot;Alpha : 0x&quot;;%s}{Alpha;%02X}" display_error="false" display_result="true" comment=""/></define_struct><define_struct type_name="PixelDWord" comment="" expr="- Color : 0x{this.Color;%08X}, RGBA : 0x{Red;%02X}{Green;%02X}{Blue;%02X}{Alpha;%02X}"><data type="int" name="Color" format="unsigned" len="4" display=""/><eval expr="Red = (Color &amp; 0x000000FF)" display_error="false" display_result="false" comment=""/><eval expr="Green = (Color &amp; 0x0000FF00) &gt;&gt; 0x8" display_error="false" display_result="false" comment=""/><eval expr="Blue = (Color &amp; 0x00FF0000) &gt;&gt; 0x10" display_error="false" display_result="false" comment=""/><eval expr="Alpha = (Color &amp; 0xFF000000) &gt;&gt; 0x18" display_error="false" display_result="false" comment=""/><eval expr="{&quot;Red : 0x&quot;;%s}{Red;%02X}" display_error="false" display_result="true" comment=""/><eval expr="{&quot;Green : 0x&quot;;%s}{Green;%02X}" display_error="false" display_result="true" comment=""/><eval expr="{&quot;Blue : 0x&quot;;%s}{Blue;%02X}" display_error="false" display_result="true" comment=""/><eval expr="{&quot;Alpha : 0x&quot;;%s}{Alpha;%02X}" display_error="false" display_result="true" comment=""/></define_struct><define_struct type_name="Header" comment="" expr=""><data type="int" name="FileSign" format="unsigned" len="4" display="hex"/><data type="int" name="Width" format="unsigned" len="2" display=""/><data type="int" name="Height" format="unsigned" len="2" display=""/><eval expr="PixelSize = (FileSign == 0x20000000 || FileSign == 0x60000000)?2:4" display_error="false" display_result="false" comment=""/></define_struct><define_struct type_name="RgbFile" comment="" expr="{this.Header.Width} X {this.Header.Height}"><use_struct name="Header" expr="" type_name="Header" comment=""/><switch test="PixelSize" comment=""><case range="2"><for name="Pixel" count="Header.Height" stop_test="" type_name="" comment=""><for name="" count="Header.Width" stop_test="" type_name="" comment=""><use_struct name="" expr="" type_name="PixelWord" comment=""/></for></for></case><case range="4"><for name="Pixel" count="Header.Height" stop_test="" type_name="" comment=""><for name="" count="Header.Width" stop_test="" type_name="" comment=""><use_struct name="" expr="" type_name="PixelDWord" comment=""/></for></for></case></switch></define_struct><use_struct name="RgbFile" expr="" type_name="RgbFile" comment=""/></binary_file_format>
